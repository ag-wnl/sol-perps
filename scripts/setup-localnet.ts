#!/usr/bin/env ts-node

/**
 * @description setup localnet for drift protocol
 */

import { Connection, LAMPORTS_PER_SOL, PublicKey } from '@solana/web3.js';
import { execSync } from 'child_process';
import { existsSync, writeFileSync } from 'fs';
import { homedir } from 'os';
import { join } from 'path';

const LOCAL_RPC_URL = 'http://localhost:8899';
const KEYPAIR_PATH = join(homedir(), '.config/solana/id.json');

async function isValidatorRunning(): Promise<boolean> {
	try {
		const connection = new Connection(LOCAL_RPC_URL, 'confirmed');
		await connection.getSlot();
		return true;
	} catch {
		return false;
	}
}

async function setupWallet(): Promise<string> {
	console.log('[INFO] setting up wallet...');

	if (!existsSync(KEYPAIR_PATH)) {
		console.log('[INFO] creating new keypair...');
		execSync('solana-keygen new --no-passphrase', { stdio: 'inherit' });
	} else {
		console.log(`[INFO] wallet found at: ${KEYPAIR_PATH}`);
	}

	const walletAddress = execSync('solana address', { encoding: 'utf8' }).trim();
	console.log(`[INFO] wallet address: ${walletAddress}`);

	return walletAddress;
}

async function fundWallet(walletAddress: string): Promise<void> {
	console.log('[INFO] funding wallet...');

	const connection = new Connection(LOCAL_RPC_URL, 'confirmed');

	try {
		const balance = await connection.getBalance(new PublicKey(walletAddress));
		console.log(`[INFO] current balance: ${balance / LAMPORTS_PER_SOL} SOL`);

		if (balance < LAMPORTS_PER_SOL) {
			console.log('[INFO] requesting airdrop...');
			const airdropSignature = await connection.requestAirdrop(
				new PublicKey(walletAddress),
				2 * LAMPORTS_PER_SOL
			);
			await connection.confirmTransaction(airdropSignature);

			const newBalance = await connection.getBalance(
				new PublicKey(walletAddress)
			);
			console.log(`[INFO] new balance: ${newBalance / LAMPORTS_PER_SOL} SOL`);
		} else {
			console.log('[INFO] wallet has sufficient balance');
		}
	} catch (error) {
		console.warn('[INFO] could not fund wallet automatically');
		console.log('[INFO] run manually: solana airdrop 2');
	}
}

function createEnvFile(): void {
	const envContent = `# Local Development Environment
# Generated by setup-localnet.ts

# Network Configuration
SOLANA_CLUSTER=localnet
RPC_URL=http://localhost:8899

# Wallet Configuration  
ANCHOR_WALLET=${KEYPAIR_PATH}

# Development Flags
LOCAL_TESTING=true
VERBOSE_LOGGING=true
`;

	writeFileSync('.env.local', envContent);
	console.log('📄 Created .env.local with local development settings');
}

async function main() {
	const args = process.argv.slice(2);

	if (args.includes('--help') || args.includes('-h')) {
		console.log('🏗️  Local Development Environment Setup');
		console.log('');
		console.log('Usage: yarn setup:localnet [options]');
		console.log('');
		console.log('Options:');
		console.log('  --validator-only     Just start the validator');
		console.log('  --setup-only        Setup without starting validator');
		console.log('  --help, -h          Show this help message');
		console.log('');
		console.log('Examples:');
		console.log(
			'  yarn setup:localnet                    # Full setup + start validator'
		);
		console.log(
			'  yarn setup:localnet --validator-only   # Just start validator'
		);
		console.log(
			'  yarn setup:localnet --setup-only       # Setup without validator'
		);
		console.log('');
		console.log('Manual validator commands:');
		console.log('  solana-test-validator');
		console.log('  solana-test-validator &  # background');
		return;
	}

	try {
		if (args.includes('--validator-only')) {
			if (await isValidatorRunning()) {
				console.log('[INFO] validator is already running');
				return;
			} else {
				console.log('[INFO] validator is not running');
				console.log('run: solana-test-validator');
			}
			return;
		}

		console.log('\n[INFO] setting up wallet...');
		const walletAddress = await setupWallet();

		console.log('\n[INFO] setting solana config to localhost');
		execSync('solana config set --url localhost', { stdio: 'inherit' });
		console.log('[INFO] solana config set to localhost');

		createEnvFile();

		if (await isValidatorRunning()) {
			console.log('[INFO] validator is already running');

			await fundWallet(walletAddress);
		} else {
			console.log('[INFO] validator is not running');
			console.log('run: solana-test-validator');
		}

		console.log('\n[SUCCESS] local env setup complete!');
	} catch (error) {
		console.error('\n[ERROR] Setup failed:', error);
		process.exit(1);
	}
}

export { main as setupLocalnet };
if (require.main === module) {
	main()
		.then(() => {
			console.log('\n[SUCCESS] Setup completed successfully');
		})
		.catch((error) => {
			console.error('\n[ERROR] Setup failed:', error);
			process.exit(1);
		});
}
